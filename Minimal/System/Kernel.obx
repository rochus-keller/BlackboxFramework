// Automatically generated by the tree shaker of Oberon+ IDE on 2021-02-04T14:21:09
// manually adjusted

definition Kernel
	import
		S := SYSTEM
	const 
		nameLen = 256 
		littleEndian = true 
		timeResolution = 1000 
		objType = "ocf" 
		symType = "osf" 
		docType = "odc" 
		fileNotFound = 1 
		syntaxError = 2 
		objNotFound = 3 
		illegalFPrint = 4 
		cyclicImport = 5 
		noMem = 6 
		commNotFound = 7 
		any = 1000000 
	type 
		Name = array nameLen of wchar 
		Utf8Name = array nameLen of char 
		Command = proc  
		Module = pointer to record 
					next-: Module
					opts-: set
					refcnt-: integer
					compTime-: array 6 of shortint
					loadTime-: array 6 of shortint
					ext-: integer
					term-: Command
					nofimps-: integer
					nofptrs-: integer
					csize-: integer
					dsize-: integer
					rsize-: integer
					code-: integer
					data-: integer
					refs-: integer
					procBase-: integer
					varBase-: integer
					names-: pointer to array of char
					ptrs-: pointer to array of integer
					imports-: pointer to array of Module
					export-: Directory
					name-: array nameLen of char
				end 
		Type = pointer to record 
					size_-: integer
					mod_-: Module
					id-: integer
					base-: array 16 of Type
					fields-: Directory
					ptroffs-: array any of integer
				end 
		Object = pointer to ObjDesc 
		ObjDesc = record 
					fprint-: integer
					offs-: integer
					id-: integer
					struct-: Type
				end 
		Directory = pointer to record 
					num-: integer
					obj-: array any of ObjDesc
				end 
		Signature = pointer to record 
					retStruct-: Type
					num-: integer
					par-: array any of record 
							id-: integer
							struct-: Type
						end
				end 
		Handler = proc  
		Reducer = pointer to record 
					next: Reducer
				end 
		Identifier = record 
					typ: integer
					obj-: ^anyrec
				end 
		TrapCleaner = pointer to record 
					next: TrapCleaner
				end 
		TryHandler = proc (a: integer; b: integer; c: integer) 
		ItemExt = pointer to record 
				end 
		ItemAttr = record 
					obj: integer
					vis: integer
					typ: integer
					adr: integer
					mod_: Module
					desc: Type
					ptr: S.PTR
					ext: ItemExt
				end 
		Hook = pointer to record 
				end 
		var 
			modList-: Module
		   trapCount-: integer
		   mainWnd: integer
	
		proc (e: ItemExt) Lookup(name: array of wchar; var i: anyrec) 
		proc (e: ItemExt) Index(index: integer; var elem: anyrec) 
		proc (e: ItemExt) Deref(var ref: anyrec) 
		proc (e: ItemExt) Valid(): boolean 
		proc (e: ItemExt) Size(): integer 
		proc (e: ItemExt) BaseTyp(): integer 
		proc (e: ItemExt) Len(): integer 
		proc (e: ItemExt) Call(var ok: boolean) 
		proc (e: ItemExt) BoolVal(): boolean 
		proc (e: ItemExt) PutBoolVal(x: boolean) 
		//proc (e: ItemExt) CharVal(): wchar 
		//proc (e: ItemExt) PutCharVal(x: wchar) 
		proc (e: ItemExt) IntVal(): integer 
		proc (e: ItemExt) PutIntVal(x: integer) 
		proc (e: ItemExt) LongVal(): longint 
		proc (e: ItemExt) PutLongVal(x: longint) 
		proc (e: ItemExt) RealVal(): longreal 
		proc (e: ItemExt) PutRealVal(x: longreal) 
		proc (e: ItemExt) SetVal(): set 
		proc (e: ItemExt) PutSetVal(x: set) 
		//proc (e: ItemExt) PtrVal(): ^anyrec 
		//proc (e: ItemExt) PutPtrVal(x: ^anyrec) 
		//proc (e: ItemExt) GetSStringVal(var x: array of char; var ok: boolean) 
		//proc (e: ItemExt) PutSStringVal(in x: array of char; var ok: boolean) 
		proc (e: ItemExt) GetStringVal(var x: array of wchar; var ok: boolean) 
		proc (e: ItemExt) PutStringVal(in x: array of wchar; var ok: boolean) 
		proc IsAlpha(ch: wchar): boolean 
		proc Upper(ch: wchar): wchar 
		proc IsUpper(ch: wchar): boolean 
		proc Lower(ch: wchar): wchar 
		proc IsLower(ch: wchar): boolean 
		proc Utf8ToString(in in_: array of char; var out: array of wchar; var res: integer) 
		proc StringToUtf8(in in_: array of wchar; var out: array of char; var res: integer) 
		proc SplitName(name: array of wchar; var head: array of wchar; var tail: array of wchar) 
		proc MakeFileName(var name: array of wchar; type_: array of wchar) 
		proc Time(): longint 
		proc Beep 
		proc ThisFinObj(var id: Identifier): ^anyrec 
		proc InstallReducer(r: Reducer) 
		proc InstallTrapChecker(h: Handler) 
		proc PushTrapCleaner(c: TrapCleaner) 
		proc PopTrapCleaner(c: TrapCleaner) 
		proc InstallCleaner(p: Command) 
		proc Cleanup 
		proc ThisLoadedMod(in name: array of wchar): Module 
		proc ThisMod(in name: array of wchar): Module 
		proc LoadMod(in name: array of wchar) 
		proc GetLoaderResult(var res: integer; var importing: array of wchar; var imported: array of wchar; var object: array of wchar) 
		proc ThisObject(mod_: Module; in name: array of wchar): Object 
		proc ThisField(rec: Type; in name: array of wchar): Object 
		proc ThisType(mod_: Module; in name: array of wchar): Type 
		proc TypeOf(in rec: anyrec): Type 
		proc LevelOf(t: Type): shortint 
		proc NewObj(var o: S.PTR; t: Type) 
		proc GetModName(mod_: Module; var name: Name) 
		//proc GetObjName(mod_: Module; obj: Object; var name: Name) 
		proc GetTypeName(t: Type; var name: Name) 
		proc Call(adr: integer; sig: Signature; in par: array of integer; n: integer): longint 
		proc Collect 
		proc FastCollect 
		proc WouldFinalize(): boolean 
		proc Allocated(): integer 
		proc Used(): integer 
		proc Start(code: Command) 
		proc Quit(exitCode: integer) 
		proc Try(h: TryHandler; a: integer; b: integer; c: integer) 
	
end Kernel
