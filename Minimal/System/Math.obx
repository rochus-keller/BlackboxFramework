module Math
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20170224, center #147, Adding a "Mod1" function to Math/SMath
	   - 20170310, center #151, Extending the domain of  Math.ArcTan2
	   - 20170330, center #157, Extending the domain of Math.Sin, Cos, & Tan
	   - 20180623, center #189, improving the treatment of the sign bit in Math/SMath
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import SYSTEM
	
	var 
		eps, e: longreal
	
	
	// code procedures for 80387 math coprocessor
	
	proc FLD(x: longreal)  end // [code] 0H // Rochus: added 0H
	proc TOP(): longreal  end // [code] 0H // Rochus: added 0H
	proc FSW(): integer  end // [code] 0DFH 0E0H
	proc FSWs(): set  end // [code] 0DFH 0E0H
	proc ST0(): longreal  end // [code] 0D9H 0C0H
	proc ST1(): longreal  end // [code] 0D9H 0C1H
	
	proc FXCH end // [code] 0D9H 0C9H
	proc FLDst0 end // [code] 0D9H 0C0H // doublicate st[0]
	proc FSTPst0 end // [code] 0DDH 0D8H // remove st[0]
	proc FSTPst1 end // [code] 0DDH 0D9H // remove st[1]
	proc FSTPDe end // [code] 0DBH 05DH 0F4H // FSTPD -12[FP] // COMPILER DEPENDENT
	proc WAIT end // [code] 09BH
	proc FNOP end // [code] 0D9H 0D0H
	
	proc FLD0 end // [code] 0D9H 0EEH
	proc FLD1 end // [code] 0D9H 0E8H
	proc FLDPI end // [code] 0D9H 0EBH
	proc FLDLN2 end // [code] 0D9H 0EDH
	proc FLDLG2 end // [code] 0D9H 0ECH
	proc FLDL2E end // [code] 0D9H 0EAH
	
	proc FADD end // [code] 0DEH 0C1H
	proc FADDst0 end // [code] 0D8H 0C0H
	proc FSUB end // [code] 0DEH 0E9H
	proc FSUBn end // [code] 0DCH 0E9H // no pop
	proc FSUBR end // [code] 0DEH 0E1H
	proc FSUBst1 end // [code] 0D8H 0E1H
	proc FMUL end // [code] 0DEH 0C9H
	proc FMULst0 end // [code] 0D8H 0C8H
	proc FMULst1st0 end // [code] 0DCH 0C9H
	proc FDIV end // [code] 0DEH 0F9H
	proc FDIVR end // [code] 0DEH 0F1H
	proc FDIVRst1 end // [code] 0D8H 0F9H
	proc FCHS end // [code] 0D9H 0E0H
	
	proc FCOM end // [code] 0D8H 0D1H
	proc FSWax end // [code] 0DFH 0E0H
	proc SAHF end // [code] 09EH
	proc JBE4 end // [code] 076H 004H
	proc JAE4 end // [code] 073H 004H
	
	proc FRNDINT end // [code] 0D9H 0FCH
	proc FSCALE end // [code] 0D9H 0FDH // st[0] * 2^FLOOR(st[1])
	proc FXTRACT end // [code] 0D9H 0F4H // exp -> st[1]; mant -> st[0]
	proc FXAM end // [code] 0D9H 0E5H
	
	proc FSQRT end // [code] 0D9H 0FAH // st[0] >= 0
	proc FSIN end // [code] 0D9H 0FEH // |st[0]| < 2^63
	proc FCOS end // [code] 0D9H 0FFH // |st[0]| < 2^63
	proc FSINCOS end // [code] 0D9H 0FBH // |st[0]| < 2^63
	proc FTAN end // [code] 0D9H 0F2H // |st[0]| < 2^63
	proc FATAN end // [code] 0D9H 0F3H // atan2(st[1], st[0])
	proc FYL2X end // [code] 0D9H 0F1H // st[1] * log2(st[0]), st[0] > 0
	proc FYL2XP1 end // [code] 0D9H 0F9H // st[1] * log2(1 + st[0]), |st[0]| < 1-sqrt(2)/2
	proc F2XM1 end // [code] 0D9H 0F0H // 2^st[0] - 1, |st[0]| <= 1
	
	
	proc IsNaN(x: longreal): boolean 
	begin 
		FLD(x)
		FXAM
		FSTPst0
		WAIT
		return FSWs() * {8, 10} = {8}
	end IsNaN
	
	
	// REAL precision
	
	proc Pi*(): longreal 
	begin 
		FLDPI
		return TOP()
	end Pi
	
	proc Eps*(): longreal 
	begin 
		return eps
	end Eps
	
	
	proc Sqrt*(x: longreal): longreal 
	begin 
		// Kernel error #143, argument of Sqrt must not be negative
		FLD(x)
		FSQRT
		WAIT
		return TOP()
	end Sqrt
	
	
	proc Exp*(x: longreal): longreal 
	begin 
		// 2 ^ (x * 1/ln(2))
		FLD(x)
		FLDL2E
		FMUL
		if abs(ST0()) = inf then
			FLD1 
		else 
			FLDst0
			FRNDINT
			FXCH
			FSUBst1
			FNOP
			F2XM1
			FLD1
			FADD 
		end 
		FSCALE
		FSTPst1
		return TOP()
	end Exp
	
	proc Ln*(x: longreal): longreal 
	begin 
		// Kernel error #143, argument of Ln must not be negative
		// ln(2) * ld(x)
		FLDLN2
		FLD(x)
		FYL2X
		WAIT
		return TOP()
	end Ln
	
	proc Log*(x: longreal): longreal 
	begin 
		// Kernel error #143, argument of Log must not be negative
		// log(2) * ld(x)
		FLDLG2
		FLD(x)
		FYL2X
		WAIT
		return TOP()
	end Log
	
	proc Power*(x, y: longreal): longreal 
	begin 
		assert(x >= 0, 20)
		assert((x # 0.0) or (y # 0.0), 21)
		assert((x # inf) or (y # 0.0), 22)
		assert((x # 1.0) or (abs(y) # inf), 23)
		// 2 ^ (y * ld(x))
		FLD(y)
		FLD(x)
		FYL2X
		if abs(ST0()) = inf then
			FLD1 
		else 
			FLDst0
			FRNDINT
			FXCH
			FSUBst1
			FNOP
			F2XM1
			FLD1
			FADD 
		end 
		FSCALE
		FSTPst1
		WAIT
		return TOP()
	end Power
	
	proc IntPower*(x: longreal; n: integer): longreal 
	begin 
		FLD1
		FLD(x)
		if n = min(integer) then
			return IntPower(x, n + 1) / x 
		end 
		if n <= 0 then // 1 / x
			FDIVRst1
			n := -n 
		end 
		while n > 0 do 
			if odd(n) then // y := y * x
				FMULst1st0
				dec(n) 
			else  // x := x * x
				FMULst0
				n := n div 2 
			end  
		end 
		FSTPst0
		return TOP()
	end IntPower
	
	
	proc Sin*(x: longreal): longreal 
	begin 
		// Kernel error #143, ABS(x) # INF
		FLD(x)
		FSIN
		WAIT
		if 10 in FSWs() then
			FSTPst0
			return 0. 
		end 
		return TOP()
	end Sin
	
	proc Cos*(x: longreal): longreal 
	begin 
		// Kernel error #143, ABS(x) # INF
		FLD(x)
		FCOS
		WAIT
		if 10 in FSWs() then
			FSTPst0
			return 1. 
		end 
		return TOP()
	end Cos
	
	proc Tan*(x: longreal): longreal 
	begin 
		// Kernel error #143, ABS(x) # INF
		FLD(x)
		FTAN
		FSTPst0
		WAIT
		if 10 in FSWs() then
			return 0. 
		end 
		return TOP()
	end Tan
	
	proc SinCos*(x: longreal; var s, c: longreal) 
	begin 
		// Kernel error #143, ABS(x) # INF
		FLD(x)
		FSINCOS
		WAIT
		if 10 in FSWs() then
			FSTPst0
			s := 0.
			c := 1. 
		else 
			c := TOP()
			s := TOP() 
		end 
	end SinCos
	
	proc ArcSin*(x: longreal): longreal 
	begin 
		// Kernel error #143, -1.0 <= x <= 1.0
		// atan2(x, sqrt(1 - x*x))
		FLD(x)
		FLDst0
		FMULst0
		FLD1
		FSUBR
		FSQRT
		FNOP
		FATAN
		WAIT
		return TOP()
	end ArcSin
	
	proc ArcCos*(x: longreal): longreal 
	begin 
		// Kernel error #143, -1.0 <= x <= 1.0
		// atan2(sqrt(1 - x*x), x)
		FLD(x)
		FMULst0
		FLD1
		FSUBR
		FSQRT
		FLD(x)
		FATAN
		WAIT
		return TOP()
	end ArcCos
	
	proc ArcTan*(x: longreal): longreal 
	begin 
		// atan2(x, 1)
		FLD(x)
		FLD1
		FATAN
		return TOP()
	end ArcTan
	
	proc ArcTan2*(y, x: longreal): longreal 
	begin 
		FLD(y)
		FLD(x)
		FATAN
		WAIT
		return TOP()
	end ArcTan2
	
	
	proc Sinh*(x: longreal): longreal 
	begin 
		// IF IsNaN(x) THEN RETURN x END;
		if x = 0 then // +/- zero
			return x 
		end 
		// abs(x) * 1/ln(2)
		FLD(abs(x))
		FLDL2E
		FMUL
		if ST0() < 0.5 then
			// (2^z - 1) + (2^z - 1) / ((2^z - 1) + 1)
			F2XM1
			FLDst0
			FLDst0
			FLD1
			FADD
			FDIV
			FADD 
		elsif ST0() # inf then 
			// 2^z - 1 / 2^z
			FLDst0
			FRNDINT
			FXCH
			FSUBst1
			FNOP
			F2XM1
			FLD1
			FADD
			FSCALE
			FSTPst1
			FLDst0
			FLD1
			FDIVR
			FSUB 
		end 
		if x < 0 then
			FCHS 
		end 
		return TOP() * 0.5
	end Sinh
	
	proc Cosh*(x: longreal): longreal 
	begin 
		// IF IsNaN(x) THEN RETURN x END;
		// 2^(abs(x) * 1/ln(2))
		FLD(abs(x))
		if ST0() # inf then
			FLDL2E
			FMUL
			FLDst0
			FRNDINT
			FXCH
			FSUBst1
			FNOP
			F2XM1
			FLD1
			FADD
			FSCALE
			FSTPst1
			// z + 1/z
			FLDst0
			FLD1
			FDIVR
			FADD 
		end 
		return TOP() * 0.5
	end Cosh
	
	proc Tanh*(x: longreal): longreal 
	begin 
		// IF IsNaN(x) THEN RETURN x END;
		if x = 0 then // +/- zero
			return x 
		end 
		// abs(x) * 1/ln(2) * 2
		FLD(abs(x))
		FLDL2E
		FMUL
		FADDst0
		if ST0() < 0.5 then
			// (2^z - 1) / (2^z + 1)
			F2XM1
			FLDst0
			FLD(2)
			FADD
			FDIV 
		elsif ST0() < 65 then 
			// 1 - 2 / (2^z + 1)
			FLDst0
			FRNDINT
			FXCH
			FSUBst1
			FNOP
			F2XM1
			FLD1
			FADD
			FSCALE
			FSTPst1
			FLD1
			FADD
			FLD(2)
			FDIVR
			FLD1
			FSUBR 
		else 
			FSTPst0
			FLD1 
		end 
		if x < 0 then
			FCHS 
		end 
		return TOP()
	end Tanh
	
	proc ArcSinh*(x: longreal): longreal 
	begin 
		// IF IsNaN(x) THEN RETURN x END;
		if x = 0 then // +/- zero
			return x 
		end 
		// x*x
		FLDLN2
		FLD(abs(x))
		FLDst0
		FMULst0
		if ST0() < 0.067 then
			// ln(2) * ld(1 + x*x / (sqrt(x*x + 1) + 1) + x)
			FLDst0
			FLD1
			FADD
			FSQRT
			FLD1
			FADD
			FDIV
			FADD
			FYL2XP1 
		else 
			// ln(2) * ld(x + sqrt(x*x + 1))
			FLD1
			FADD
			FSQRT
			FADD
			FYL2X 
		end 
		if x < 0 then
			FCHS 
		end 
		return TOP()
	end ArcSinh
	
	proc ArcCosh*(x: longreal): longreal 
	begin 
		// 20, x >= 1.0
		// IF IsNaN(x) THEN RETURN x END;
		// ln(2) * ld(x + sqrt(x*x - 1))
		FLDLN2
		FLD(x)
		FLDst0
		FMULst0
		FLD1
		FSUB
		FSQRT
		FADD
		FYL2X
		WAIT
		return TOP()
	end ArcCosh
	
	proc ArcTanh*(x: longreal): longreal 
	begin 
		// 20, -1.0 <= x <= 1.0
		// IF IsNaN(x) THEN RETURN x END;
		if x = 0 then // +/- zero
			return x 
		end 
		// |x|
		FLDLN2
		FLD(abs(x))
		if ST0() < 0.12 then
			// ln(2) * ld(1 + 2*x / (1 - x))
			FLDst0
			FLD1
			FSUBR
			FDIV
			FADDst0
			FYL2XP1 
		else 
			// ln(2) * ld((1 + x) / (1 - x))
			FLDst0
			FLD1
			FADD
			FXCH
			FLD1
			FSUBR
			FDIV
			FNOP
			FYL2X 
		end 
		if x < 0 then
			FCHS 
		end 
		WAIT
		return TOP() * 0.5
	end ArcTanh
	
	
	proc Floor*(x: longreal): longreal 
	begin 
		FLD(x)
		FLDst0
		FRNDINT
		FCOM
		FSWax
		FSTPst1
		SAHF
		JBE4
		FLD1
		FSUB
		return TOP()
	end Floor
	
	proc Ceiling*(x: longreal): longreal 
	begin 
		FLD(x)
		FLDst0
		FRNDINT
		FCOM
		FSWax
		FSTPst1
		SAHF
		JAE4
		FLD1
		FADD
		return TOP()
	end Ceiling
	
	proc Round*(x: longreal): longreal 
	begin 
		FLD(x)
		if abs(ST0()) = inf then
			return TOP() 
		end 
		FLDst0
		FRNDINT
		FSUBn
		FXCH
		if TOP() = 0.5 then
			FLD1
			FADD 
		end 
		return TOP()
	end Round
	
	proc Trunc*(x: longreal): longreal 
	begin 
		FLD(x)
		FLDst0
		FRNDINT
		if ST1() >= 0 then
			FCOM
			FSWax
			FSTPst1
			SAHF
			JBE4
			FLD1
			FSUB 
		else 
			FCOM
			FSWax
			FSTPst1
			SAHF
			JAE4
			FLD1
			FADD 
		end 
		return TOP()
	end Trunc
	
	proc Frac*(x: longreal): longreal 
	begin 
		// Kernel error #143, x # INF  &  x # -INF
		FLD(x)
		FLDst0
		FRNDINT
		if ST1() >= 0 then
			FCOM
			FSWax
			SAHF
			JBE4
			FLD1
			FSUB 
		else 
			FCOM
			FSWax
			SAHF
			JAE4
			FLD1
			FADD 
		end 
		FSUB
		WAIT
		return TOP()
	end Frac
	
	proc Mod1*(x: longreal): longreal 
	begin 
		// Kernel error #143, x # INF  &  x # -INF
		FLD(x)
		FLDst0
		FRNDINT
		FCOM
		FSWax
		SAHF
		JBE4
		FLD1
		FSUB
		FSUB
		WAIT
		return TOP()
	end Mod1
	
	proc Sign*(x: longreal): longreal 
	begin 
		FLD(x)
		FXAM
		WAIT
		case FSW() div 256 mod 8 of 
			| 0, 2:  // +/- zero
				FSTPst0
				return x 
			| 1, 4, 5: 
				FSTPst0
				return 1.0 
			| 3, 6, 7: 
				FSTPst0
				return -1.0 
		end 
	end Sign
	
	proc SignBit*(x: longreal): boolean  // IEEE 754-2008, section 5.7.2
		var 
			s: set
	begin 
		SYSTEM.GET(SYSTEM.ADR(x) + 4, s)
		return 31 in s
	end SignBit
	
	proc CopySign*(x, y: longreal): longreal  // IEEE 754-2008, section 5.5.1
		var 
			s: set
	begin 
		SYSTEM.GET(SYSTEM.ADR(y) + 4, s)
		if 31 in s then
			return -abs(x) 
		else 
			return abs(x) 
		end 
	end CopySign
	
	proc Mantissa*(x: longreal): longreal 
	begin 
		FLD(x)
		FXAM
		WAIT
		case FSW() div 256 mod 8 of 
			| 4, 6: 
				FXTRACT
				FSTPst1
				return TOP() 
			| 0, 2:  // +/- zero
				FSTPst0
				return x 
			| 5:  // inf
				FSTPst0
				return 1.0 
			| 7:  // -inf
				FSTPst0
				return -1.0 
			| 1:  // nan
				FSTPst0
				return 1.5 
			| 3:  // -nan
				FSTPst0
				return -1.5 
		end 
	end Mantissa
	
	proc Exponent*(x: longreal): integer  // COMPILER DEPENDENT
		var  // e is set by FSTPDe!
			e: integer
	begin 
		FLD(x)
		FXAM
		WAIT
		case FSW() div 256 mod 8 of 
			| 4, 6: 
				FXTRACT
				FSTPst0
				FSTPDe
				WAIT
				return e 
			| 0, 2:  // zero
				FSTPst0
				return 0 
			| 1, 3, 5, 7:  // inf or nan
				FSTPst0
				return max(integer) 
		end 
	end Exponent
	
	proc Real*(m: longreal; e: integer): longreal 
		var 
			s: set
	begin 
		if (m = 0) then // +/- zero
			return m 
		end 
		assert(~IsNaN(m) & (1 <= abs(m)) & (abs(m) < 2), 20)
		if e = max(integer) then
			SYSTEM.GET(SYSTEM.ADR(m) + 4, s)
			SYSTEM.PUT(SYSTEM.ADR(m) + 4, s + {20..30})
			return m 
		else 
			FLD(e)
			FLD(m)
			FSCALE
			FSTPst1
			return TOP() 
		end 
	end Real

begin
	eps := 1.0e+0
	e := 2.0e+0
	while e > 1.0e+0 do 
		eps := eps / 2.0e+0
		e := 1.0e+0 + eps 
	end 
	eps := 2.0e+0 * eps
end Math
