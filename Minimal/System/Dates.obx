module Dates
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20170313, center #154, atomic operation to get date and time (GetDateTime & GetUTCDateTime)
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import Kernel
	
	const 
		monday* = 0
		tuesday* = 1
		wednesday* = 2
		thursday* = 3
		friday* = 4
		saturday* = 5
		sunday* = 6
		
		short_* = 0
		long_* = 1
		abbreviated* = 2
		plainLong* = 3
		plainAbbreviated* = 4
	
	type 
		Date* = record 
				year*, month*, day*: integer 
			end 
		
		Time* = record 
				hour*, minute*, second*: integer 
			end 
		
		Hook* = pointer to (* abstract *) record (Kernel.Hook) end 
	
	var 
		M, N: array 8 of integer
		hook: Hook
	
	proc (h: Hook) GetTime*(var d: Date; var t: Time)  end // new abstract
	proc (h: Hook) GetUTCTime*(var d: Date; var t: Time)  end // new abstract
	proc (h: Hook) GetUTCBias*(var bias: integer)  end // new abstract
	proc (h: Hook) DateToString*(d: Date; format: integer; var str: array of wchar)  end // new abstract
	proc (h: Hook) TimeToString*(t: Time; var str: array of wchar)  end // new abstract
	
	proc SetHook*(h: Hook) 
	begin 
		hook := h
	end SetHook
	
	proc ValidTime*(in t: Time): boolean 
	begin 
		return 
			(t.hour >= 0) & (t.hour <= 23) 
			& (t.minute >= 0) & (t.minute <= 59) 
			& (t.second >= 0) & (t.second <= 59)
	end ValidTime
	
	proc ValidDate*(in d: Date): boolean 
		var 
			y, m, d1: integer
	begin 
		if (d.year < 1) or (d.year > 9999) or (d.month < 1) or (d.month > 12) or (d.day < 1) then
			return false 
		else 
			y := d.year
			m := d.month
			if m = 2 then
				if (y < 1583) & (y mod 4 = 0) 
					or (y mod 4 = 0) & ((y mod 100 # 0) or (y mod 400 = 0)) then
					d1 := 29 
				else 
					d1 := 28 
				end  
			elsif m in {1, 3, 5, 7, 8, 10, 12} then 
				d1 := 31 
			else 
				d1 := 30 
			end 
			if (y = 1582) & (m = 10) & (d.day > 4) & (d.day < 15) then
				return false 
			end 
			return d.day <= d1 
		end 
	end ValidDate
	
	proc Day*(in d: Date): integer 
		var 
			y, m, n: integer
	begin 
		y := d.year
		m := d.month - 3
		if m < 0 then
			inc(m, 12)
			dec(y) 
		end 
		n := y * 1461 div 4 + (m * 153 + 2) div 5 + d.day - 306
		if n > 577737 then
			n := n - (y div 100 * 3 - 5) div 4 
		end 
		return n
	end Day
	
	proc DayToDate*(n: integer; var d: Date) 
		var 
			c, y, m: integer
	begin 
		if n > 577737 then
			n := n * 4 + 1215
			c := n div 146097
			n := n mod 146097 div 4 
		else 
			n := n + 305
			c := 0 
		end 
		n := n * 4 + 3
		y := n div 1461
		n := n mod 1461 div 4
		n := n * 5 + 2
		m := n div 153
		n := n mod 153 div 5
		if m > 9 then
			m := m - 12
			inc(y) 
		end 
		d.year := short(100 * c + y)
		d.month := short(m + 3)
		d.day := short(n + 1)
	end DayToDate
	
	proc GetDate*(var d: Date) 
		var 
			t: Time
	begin 
		assert(hook # nil, 100)
		hook.GetTime(d, t)
	end GetDate
	
	proc GetTime*(var t: Time) 
		var 
			d: Date
	begin 
		assert(hook # nil, 100)
		hook.GetTime(d, t)
	end GetTime
	
	proc GetDateTime*(var d: Date; var t: Time) 
	begin 
		assert(hook # nil, 100)
		hook.GetTime(d, t)
	end GetDateTime
	
	proc GetUTCDate*(var d: Date) 
		var 
			t: Time
	begin 
		assert(hook # nil, 100)
		hook.GetUTCTime(d, t)
	end GetUTCDate
	
	proc GetUTCTime*(var t: Time) 
		var 
			d: Date
	begin 
		assert(hook # nil, 100)
		hook.GetUTCTime(d, t)
	end GetUTCTime
	
	proc GetUTCDateTime*(var d: Date; var t: Time) 
	begin 
		assert(hook # nil, 100)
		hook.GetUTCTime(d, t)
	end GetUTCDateTime
	
	proc GetUTCBias*(var bias: integer) 
	begin 
		assert(hook # nil, 100)
		hook.GetUTCBias(bias)
	end GetUTCBias
	
	proc GetEasterDate*(year: integer; var d: Date) 
		var 
			k, m, n, a, b, c, d0, e, o: integer
			month, day: integer
	begin 
		assert((year >= 1583) & (year <= 2299), 20)
		k := year div 100 - 15
		m := M[k]
		n := N[k]
		a := year mod 19
		b := year mod 4
		c := year mod 7
		d0 := (19 * a + m) mod 30
		e := (2 * b + 4 * c + 6 * d0 + n) mod 7
		o := 21 + d0 + e
		month := 3 + o div 31
		day := o mod 31 + 1
		if month = 4 then
			if day = 26 then
				day := 19 
			elsif (day = 25) & (d0 = 28) & (e = 6) & (a > 10) then 
				day := 18 
			end  
		end 
		d.year := year
		d.month := month
		d.day := day
	end GetEasterDate
	
	proc DayOfWeek*(in d: Date): integer 
	// post: res = 0: Monday .. res = 6: Sunday
	begin 
		return short((4 + Day(d)) mod 7)
	end DayOfWeek
	
	proc DateToString*(in d: Date; format: integer; var str: array of wchar) 
	begin 
		assert(hook # nil, 100)
		hook.DateToString(d, format, str)
	end DateToString
	
	proc TimeToString*(in t: Time; var str: array of wchar) 
	begin 
		assert(hook # nil, 100)
		hook.TimeToString(t, str)
	end TimeToString

begin
	M[0] := 22
	N[0] := 2
	M[1] := 22
	N[1] := 2
	M[2] := 23
	N[2] := 3
	M[3] := 23
	N[3] := 4
	M[4] := 24
	N[4] := 5
	M[5] := 24
	N[5] := 5
	M[6] := 24
	N[6] := 6
	M[7] := 25
	N[7] := 0
end Dates
