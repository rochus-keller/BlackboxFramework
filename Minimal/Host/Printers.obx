module Printers
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems, Josef Templ"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20060316, jt, support for nested pairs of OpenJob/CloseJob
	   - 20070131, bh, Unicode support
	   - 20070327, bh, SetOrientation added
	   - 20150515, center #48, dialogCommand improved, OpenPage with global page numbering
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import 
		SYSTEM, WinApi := Win.Api, WinDlg := Win.Dlg, 
		System.Kernel, System.Files, System.Dialog, System.Ports, HostPorts := Host.Ports, 
		System.Stores, System.Models, System.Views, System.Controllers, 
		System.Properties, System.Printers, System.Printing, System.Documents, 
		System.Windows, HostWindows := Host.Windows
	
	const 
		eduMsgH = 30 * Ports.point
		
		dialogCommand = "StdCmds.OpenToolDialog('Host/Rsrc/Printing', '#Host:Print')"
	
	type 
		Printer = pointer to record (Printers.Printer) 
				w, h: integer
				// port: HostPorts.Port;	(* port to which forwarding occurs *)
				devNames, devMode: WinApi.HANDLE // printer description
				clean: TrapCleaner
				cancel: Windows.Window  // cancel dialog
			end 
		
		(* Rider = POINTER TO RECORD (HostPorts.Rider)
		   p: Printer
		   END; *)
		
		
		Directory = pointer to record (Printers.Directory) end 
		
		TrapCleaner = pointer to record (Kernel.TrapCleaner) 
				p: Printer 
			end 
	
	
	var 
		printing*: record 
				pnum-: integer
				Cancel*: proc  
			end 
		
		dir: Directory
		current: Printers.Printer
		aborted: boolean
		
		sa, sb, sc: array 64 of wchar
		err: integer
		
		jobLevel: integer
	
	
	proc PrinterDC(devNames, devMode: WinApi.HANDLE): WinApi.HANDLE 
		var 
			adr: integer
			i: shortint
			a, b, c: WinApi.PtrWSTR
			dc: WinApi.HANDLE
			dm: WinApi.PtrDEVMODEW
	begin 
		adr := WinApi.GlobalLock(devNames)
		dm := SYSTEM.VAL(WinApi.PtrDEVMODEW, WinApi.GlobalLock(devMode))
		SYSTEM.GET(adr + 0, i)
		a := SYSTEM.VAL(WinApi.PtrWSTR, adr + i * size(wchar))
		SYSTEM.GET(adr + 2, i)
		b := SYSTEM.VAL(WinApi.PtrWSTR, adr + i * size(wchar))
		SYSTEM.GET(adr + 4, i)
		c := SYSTEM.VAL(WinApi.PtrWSTR, adr + i * size(wchar))
		dc := WinApi.CreateDCW(a, b, c, dm^)
		if dc = 0 then
			dc := WinApi.CreateDCW(a, b, c, nil) 
		end 
		adr := WinApi.GlobalUnlock(devMode)
		adr := WinApi.GlobalUnlock(devNames)
		return dc
	end PrinterDC
	
	proc SetupPrinter(p: Printer; dc: WinApi.HANDLE) 
		var 
			res, w, h, pw, ph, nx, ny, unit, ux, uy: integer
			pt: WinApi.POINT
			port: Ports.Port
			hport: HostPorts.Port
	begin 
		w := WinApi.GetDeviceCaps(dc, WinApi.HORZRES)
		h := WinApi.GetDeviceCaps(dc, WinApi.VERTRES)
		nx := WinApi.GetDeviceCaps(dc, WinApi.LOGPIXELSX)
		ny := WinApi.GetDeviceCaps(dc, WinApi.LOGPIXELSY)
		ux := (Ports.inch + nx div 2) div nx
		uy := (Ports.inch + ny div 2) div ny
		unit := ux
		if nx < ny then
			h := h * nx div ny 
		elsif nx > ny then 
			w := w * ny div nx
			unit := uy 
		end 
		pw := WinApi.GetDeviceCaps(dc, WinApi.PHYSICALWIDTH)
		ph := WinApi.GetDeviceCaps(dc, WinApi.PHYSICALHEIGHT)
		if (pw = 0) or (ph = 0) then
			res := WinApi.Escape(dc, 12, 0, nil, SYSTEM.ADR(pt))
			assert(res > 0, 100)
			pw := pt.x
			ph := pt.y 
		end 
		pw := pw * ux
		ph := ph * uy
		nx := WinApi.GetDeviceCaps(dc, WinApi.PHYSICALOFFSETX)
		ny := WinApi.GetDeviceCaps(dc, WinApi.PHYSICALOFFSETY)
		if (nx = 0) or (ny = 0) then
			res := WinApi.Escape(dc, 13, 0, nil, SYSTEM.ADR(pt))
			assert(res > 0, 100)
			nx := pt.x
			ny := pt.y 
		end 
		nx := nx * ux
		ny := ny * uy
		p.InitPrinter(-nx, -ny, pw - nx, ph - ny)
		port := p.ThisPort()
		if port = nil then
			new(hport)
			p.InitPort(hport)
			port := hport
			port.Init(unit, Ports.printer) 
		end 
		port.SetSize(w, h)
	end SetupPrinter
	
	proc NewPrinter*(devNames, devMode: WinApi.HANDLE): Printers.Printer 
		var 
			p: Printer
			dc: WinApi.HANDLE
			res: integer
	begin 
		assert(devNames # 0, 20)
		dc := PrinterDC(devNames, devMode)
		if dc # 0 then
			new(p)
			p.devNames := devNames
			p.devMode := devMode
			SetupPrinter(p, dc)
			res := WinApi.DeleteDC(dc) 
		else 
			p := nil 
		end 
		return p
	end NewPrinter
	
	proc SetCurrent*(devNames, devMode: WinApi.HANDLE)  // used in HostDialog
	begin 
		if devNames # 0 then
			current := NewPrinter(devNames, devMode) 
		end 
	end SetCurrent
	
	proc GetCurrent*(var devNames, devMode: WinApi.HANDLE)  // used in HostDialog
	begin 
		if current # nil then
			with current: Printer do 
				devNames := current.devNames
				devMode := current.devMode 
			end  
		end 
	end GetCurrent
	
	proc GetPage*(p: Printers.Printer; var w, h: integer) 
		var 
			l, t, r, b: integer
	begin 
		with p: Printer do 
			p.GetRect(l, t, r, b)
			w := r - l
			h := b - t 
		end 
	end GetPage
	
	
	proc Error(res: integer): integer 
	begin 
		if res = -1 then
			res := WinApi.GetLastError() 
		elsif aborted then 
			res := 1 
		else 
			res := 0 
		end 
		return res
	end Error
	
	proc Cancel
	begin 
		aborted := true
	end Cancel
	
	proc AbortHandler(dc: WinApi.HANDLE; error: integer): integer 
		var 
			res: integer
			msg: WinApi.MSG
			s: array 32 of wchar
	begin 
		while WinApi.PeekMessageW(msg, 0, 0, 0, 1) # 0 do 
			res := WinApi.TranslateMessage(msg)
			(* IF msg.message = WinApi.WMPaint THEN
			   res := WinApi.GetClassNameW(msg.wnd, s, LEN(s));
			   IF (s # "Oberon Doc") & (s # "Oberon Aux") THEN
			   res := WinApi.DispatchMessageW(msg)
			   END
			   ELSE
			   res := WinApi.DispatchMessageW(msg)
			   END *)
			
			
			res := WinApi.DispatchMessageW(msg) 
		end 
		if aborted then
			return 0 
		else 
			return 1 
		end 
	end AbortHandler
	
	proc (c: TrapCleaner) Cleanup
		var 
			res: integer
			p: Printer
	begin 
		jobLevel := 0
		p := c.p
		res := WinApi.AbortDoc(p.ThisPort()(HostPorts.Port).dc)
		res := WinApi.DeleteDC(p.ThisPort()(HostPorts.Port).dc)
		res := WinApi.EnableWindow(HostWindows.main, 1)
		HostPorts.ResetColors
		if p.cancel # nil then
			Windows.dir.Close(p.cancel)
			p.cancel := nil 
		end 
	end Cleanup
	
	
	// Printer
	(* PROCEDURE (p: Printer) NewRider (): Rider;
	   VAR r: Rider;
	   BEGIN
	   ASSERT(p.port # NIL, 20); ASSERT(p.port.dc # 0, 21);
	   NEW(r); r.p := p; r.InitPort(p.port);
	   RETURN r
	   END NewRider; *)
	
	
	proc (p: Printer) OpenJob(var copies: integer; name: array of wchar) 
		var 
			res: integer
			info: WinApi.DOCINFOW
			s: Stores.Store
			port: HostPorts.Port
	begin 
		if jobLevel = 0 then
			aborted := false
			copies := 1
			port := p.ThisPort()(HostPorts.Port)
			port.SetDC(PrinterDC(p.devNames, p.devMode), 0)
			p.res := Error(WinApi.SetAbortProc(port.dc, AbortHandler))
			if p.res = 0 then
				// open cancel dialog
				printing.pnum := 0
				HostWindows.dir.unmoveable := true
				Dialog.Call(dialogCommand, " ", res)
				HostWindows.dir.unmoveable := false
				p.cancel := Windows.dir.First()
				// install trap cleaner
				new(p.clean)
				p.clean.p := p
				Kernel.PushTrapCleaner(p.clean)
				// start printing
				info.cbSize := size(WinApi.DOCINFOW)
				info.lpszDocName := name
				info.lpszOutput := nil
				p.res := Error(WinApi.StartDocW(port.dc, info))
				HostPorts.SetPrinterColors
				res := WinApi.EnableWindow(HostWindows.main, 0) 
			end 
			port.SetDC(port.dc, 0)  // reinitialize dc
		end 
		inc(jobLevel)
	end OpenJob
	
	proc (p: Printer) CloseJob
		var 
			res: integer
			port: HostPorts.Port
	begin 
		if jobLevel = 1 then
			port := p.ThisPort()(HostPorts.Port)
			if aborted then
				p.res := Error(WinApi.AbortDoc(port.dc)) 
			else 
				p.res := Error(WinApi.EndDoc(port.dc)) 
			end 
			res := WinApi.DeleteDC(port.dc)
			res := WinApi.EnableWindow(HostWindows.main, 1)
			HostPorts.ResetColors
			if p.cancel # nil then
				Windows.dir.Close(p.cancel)
				p.cancel := nil 
			end 
			Kernel.PopTrapCleaner(p.clean) 
		end 
		dec(jobLevel)
	end CloseJob
	
	proc (p: Printer) OpenPage
		var 
			res: integer
			port: HostPorts.Port
	begin 
		port := p.ThisPort()(HostPorts.Port)
		if ~aborted then
			p.res := Error(WinApi.StartPage(port.dc)) 
		end 
		inc(printing.pnum)
		Dialog.Update(printing)
		res := WinApi.UpdateWindow(p.cancel(HostWindows.Window).wnd)
		port.SetDC(port.dc, 0) // reinitialize dc
	end OpenPage
	
	proc (p: Printer) ClosePage
	begin 
		if ~aborted then
			p.res := Error(WinApi.EndPage(p.ThisPort()(HostPorts.Port).dc)) 
		end 
	end ClosePage
	
	proc (p: Printer) SetOrientation(landscape: boolean) 
		var 
			res, w, h: integer
			dc: WinApi.HANDLE
			dm: WinApi.PtrDEVMODEW
	begin 
		GetPage(p, w, h)
		if (w > h) # landscape then
			dm := SYSTEM.VAL(WinApi.PtrDEVMODEW, WinApi.GlobalLock(p.devMode))
			if landscape then
				dm.dmOrientation := WinApi.DMORIENT_LANDSCAPE 
			else 
				dm.dmOrientation := WinApi.DMORIENT_PORTRAIT 
			end 
			dm.dmFields := dm.dmFields + WinApi.DM_ORIENTATION
			res := WinApi.GlobalUnlock(p.devMode)
			dc := PrinterDC(p.devNames, p.devMode)
			SetupPrinter(p, dc)
			res := WinApi.DeleteDC(dc) 
		end 
	end SetOrientation
	
	(* PROCEDURE (p: Printer) SetSize (w, h: INTEGER);
	   BEGIN
	   p.w := w; p.h := h
	   END SetSize;
	   
	   PROCEDURE (p: Printer) OpenBuffer (l, t, r, b: INTEGER);
	   END OpenBuffer;
	   
	   PROCEDURE (p: Printer) CloseBuffer;
	   END CloseBuffer;
	   
	   PROCEDURE (p: Printer) GetSize (OUT w, h: INTEGER);
	   BEGIN
	   w := p.w; h := p.h
	   END GetSize; *)
	
	
	
	
	// Rider
	(* PROCEDURE (rd: Rider) Base (): Ports.Port;
	   BEGIN
	   RETURN rd.p
	   END Base; *)
	
	
	
	// Directory
	
	proc (d: Directory) Default(): Printers.Printer 
		var 
			res: integer
			prt: WinDlg.PRINTDLGW
	begin 
		prt.lStructSize := size(WinDlg.PRINTDLGW)
		prt.hDevMode := 0
		prt.hDevNames := 0
		prt.hwndOwner := 0
		prt.Flags := {7, 10} // no warning, return default
		res := WinDlg.PrintDlgW(prt)
		if res # 0 then
			return NewPrinter(prt.hDevNames, prt.hDevMode) 
		else 
			(* res := WinApi.CommDlgExtendedError();
			   ASSERT(res = 1008H, 100);	(* no default printer *) *)
			
			
			return nil 
		end 
	end Default
	
	proc (d: Directory) Current(): Printers.Printer 
	begin 
		return current
	end Current
	
	proc (d: Directory) Available(): boolean 
	begin 
		return current # nil
	end Available
	
	
	proc Init
	begin 
		printing.Cancel := Cancel
		new(dir)
		Printers.SetDir(dir)
		current := dir.Default()
	end Init

begin
	Init
end Printers
