module Strings
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20141027, center #19, full Unicode support for Component Pascal identifiers added
	   - 20150130, center #27, Adding SET conversion to the module Strings
	   - 20150130, center #28, Fixing a bug in Strings.Replace in case of truncation
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import Kernel, Math
	
	const 
		charCode* = -1
		decimal* = 10
		hexadecimal* = -2
		roman* = -3
		digitspace* = 08fx
		showBase* = true
		hideBase* = false
		minLongIntRev = "8085774586302733229" // reversed string of -MIN(LONGINT)
	
	var 
		maxExp: integer
		maxDig: integer
		factor: longreal // 10^maxDig
		digits: array 17 of wchar
		toUpper, toLower: array 256 of wchar
	
	
	// integer conversions
	
	proc IntToString*(x: longint; var s: array of wchar) 
		var 
			j, k: integer
			ch: wchar
			a: array 32 of wchar
	begin 
		if x # min(longint) then
			if x < 0 then
				s[0] := "-"
				k := 1
				x := -x 
			else 
				k := 0 
			end 
			j := 0
			repeat 
				a[j] := wchr(short(x mod 10 + ord("0")))
				x := x div 10
				inc(j) 
			until x = 0  
		else 
			a := minLongIntRev
			s[0] := "-"
			k := 1
			j := 0
			while a[j] # 0x do 
				inc(j) 
			end  
		end 
		assert(k + j < len(s), 23)
		repeat 
			dec(j)
			ch := a[j]
			s[k] := ch
			inc(k) 
		until j = 0 
		s[k] := 0x
	end IntToString
	
	proc IntToStringForm*(x: longint; form, minWidth: integer; fillCh: wchar
		showBase: boolean; var s: array of wchar) 
		var 
			base, i, j, k, si: integer
			mSign: boolean
			a: array 128 of wchar
			c1, c5, c10: wchar
	begin 
		assert((form = charCode) or (form = hexadecimal) or (form = roman) or ((form >= 2) & (form <= 16)), 20)
		assert(minWidth >= 0, 22)
		if form = charCode then
			base := 16 
		elsif form = hexadecimal then 
			base := 16 
		else 
			base := form 
		end 
		
		if form = roman then
			assert((x > 0) & (x < 3999), 21)
			base := 1000
			i := 0
			mSign := false
			while (base > 0) & (x > 0) do 
				if base = 1 then
					c1 := "I"
					c5 := "V"
					c10 := "X" 
				elsif base = 10 then 
					c1 := "X"
					c5 := "L"
					c10 := "C" 
				elsif base = 100 then 
					c1 := "C"
					c5 := "D"
					c10 := "M" 
				else 
					c1 := "M" 
				end 
				k := short(x div base)
				x := x mod base
				if k in {4, 9} then
					a[i] := c1
					inc(i) 
				end 
				if k in {4..8} then
					a[i] := c5
					inc(i) 
				end 
				if k = 9 then
					a[i] := c10
					inc(i) 
				elsif k in {1..3, 6..8} then 
					j := k mod 5
					repeat 
						a[i] := c1
						inc(i)
						dec(j) 
					until j = 0  
				end 
				base := base div 10 
			end  
		elsif (form = hexadecimal) or (form = charCode) then 
			i := 0
			mSign := false
			if showBase then
				dec(minWidth) 
			end 
			repeat 
				a[i] := digits[x mod base]
				x := x div base
				inc(i) 
			until (x = 0) or (x = -1) or (i = len(a)) 
			if x = -1 then
				fillCh := "F" 
			end  
		else 
			if x < 0 then
				i := 0
				mSign := true
				dec(minWidth)
				repeat 
					if x mod base = 0 then
						a[i] := digits[0]
						x := x div base 
					else 
						a[i] := digits[base - x mod base]
						x := x div base + 1 
					end 
					inc(i) 
				until (x = 0) or (i = len(a))  
			else 
				i := 0
				mSign := false
				repeat 
					a[i] := digits[x mod base]
					x := x div base
					inc(i) 
				until (x = 0) or (i = len(a))  
			end 
			if showBase then
				dec(minWidth)
				if base < 10 then
					dec(minWidth) 
				else 
					dec(minWidth, 2) 
				end  
			end  
		end 
		si := 0
		if mSign & (fillCh = "0") & (si < len(s)) then
			s[si] := "-"
			inc(si)
			mSign := false 
		end 
		while minWidth > i do 
			if si < len(s) then
				s[si] := fillCh
				inc(si) 
			end 
			dec(minWidth) 
		end 
		if mSign & (si < len(s)) then
			s[si] := "-"
			inc(si) 
		end 
		if form = roman then
			j := 0
			while j < i do 
				if si < len(s) then
					s[si] := a[j]
					inc(si) 
				end 
				inc(j) 
			end  
		else 
			repeat 
				dec(i)
				if si < len(s) then
					s[si] := a[i]
					inc(si) 
				end  
			until i = 0  
		end 
		if showBase & (form # roman) then
			if (form = charCode) & (si < len(s)) then
				s[si] := "X"
				inc(si) 
			elsif (form = hexadecimal) & (si < len(s)) then 
				s[si] := "H"
				inc(si) 
			elsif (form < 10) & (si < len(s) - 1) then 
				s[si] := "%"
				s[si + 1] := digits[base]
				inc(si, 2) 
			elsif (si < len(s) - 2) then 
				s[si] := "%"
				s[si + 1] := digits[base div 10]
				s[si + 2] := digits[base mod 10]
				inc(si, 3) 
			end  
		end 
		if si < len(s) then
			s[si] := 0x 
		else 
			halt(23) 
		end 
	end IntToStringForm
	
	proc StringToInt*(in s: array of wchar; var x: integer; var res: integer) 
		const 
			hexLimit = max(integer) div 8 + 1
		var 
			i, j, k, digits: integer
			ch, top: wchar
			neg: boolean
			base: integer
	begin 
		res := 0
		i := 0
		ch := s[0]
		while (ch # 0x) & (ch <= " ") or (ch = 8bx) or (ch = 8fx) or (ch = 0a0x) do  // ignore leading blanks
			inc(i)
			ch := s[i] 
		end 
		j := i
		top := "0"
		while (ch # 0x) & (ch # "H") & (ch # "X") & (ch # "%") do 
			if ch > top then
				top := ch 
			end 
			inc(j)
			ch := s[j] 
		end 
		if (ch = "H") or (ch = "X") then
			x := 0
			ch := s[i]
			if ("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F") then
				while ch = "0" do 
					inc(i)
					ch := s[i] 
				end 
				digits := 0
				while (res = 0) & (("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F")) do 
					if ch < "A" then
						k := ord(ch) - ord("0") 
					else 
						k := ord(ch) - ord("A") + 10 
					end 
					if digits < 8 then
						x := x mod hexLimit
						if x >= hexLimit div 2 then
							x := x - hexLimit 
						end 
						x := x * 16 + k
						inc(i)
						ch := s[i] 
					else 
						res := 1 
					end 
					inc(digits) 
				end 
				if res = 0 then
					if (ch # "H") & (ch # "X") or (s[i + 1] # 0x) then
						res := 2 
					end  
				end  
			else 
				res := 2 
			end  
		else 
			if ch = "%" then
				inc(j)
				ch := s[j]
				base := 0
				if ("0" <= ch) & (ch <= "9") then
					k := ord(ch) - ord("0")
					repeat 
						base := base * 10 + k
						inc(j)
						ch := s[j]
						k := ord(ch) - ord("0") 
					until (ch < "0") or (ch > "9") or (base > (max(integer) - k) div 10) 
					if ("0" <= ch) & (ch <= "9") then
						base := 0 
					end  
				end  
			else 
				base := 10 
			end 
			
			if (base < 2) or (base > 16) then
				res := 2 
			elsif (base <= 10) & (ord(top) < base + ord("0")) 
				or (base > 10) & (ord(top) < base - 10 + ord("A")) then 
				x := 0
				ch := s[i]
				neg := false
				if ch = "-" then
					inc(i)
					ch := s[i]
					neg := true 
				elsif ch = "+" then 
					inc(i)
					ch := s[i] 
				end 
				while (ch # 0x) & (ch <= " ") do 
					inc(i)
					ch := s[i] 
				end 
				if ("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F") then
					if ch <= "9" then
						k := ord(ch) - ord("0") 
					else 
						k := ord(ch) - ord("A") + 10 
					end 
					while (("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F")) & (res = 0) do 
						if x >= (min(integer) + (base - 1) + k) div base then
							x := x * base - k
							inc(i)
							ch := s[i]
							if ch <= "9" then
								k := ord(ch) - ord("0") 
							else 
								k := ord(ch) - ord("A") + 10 
							end  
						else 
							res := 1 
						end  
					end  
				else 
					res := 2 
				end 
				if res = 0 then
					if ~neg then
						if x > min(integer) then
							x := -x 
						else 
							res := 1 
						end  
					end 
					if (ch # 0x) & (ch # "%") then
						res := 2 
					end  
				end  
			else 
				res := 2 
			end  
		end 
	end StringToInt
	
	proc StringToLInt*(in s: array of wchar; var x: longint; var res: integer) 
		const 
			hexLimit = max(longint) div 8 + 1
		var 
			i, j, k, digits: integer
			ch, top: wchar
			neg: boolean
			base: integer
	begin 
		res := 0
		i := 0
		ch := s[0]
		while (ch # 0x) & (ch <= " ") or (ch = 8bx) or (ch = 8fx) or (ch = 0a0x) do  // ignore leading blanks
			inc(i)
			ch := s[i] 
		end 
		j := i
		top := "0"
		while (ch # 0x) & (ch # "H") & (ch # "X") & (ch # "%") do 
			if ch > top then
				top := ch 
			end 
			inc(j)
			ch := s[j] 
		end 
		if (ch = "H") or (ch = "X") then
			x := 0
			ch := s[i]
			if ("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F") then
				while ch = "0" do 
					inc(i)
					ch := s[i] 
				end 
				digits := 0
				while (res = 0) & (("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F")) do 
					if ch < "A" then
						k := ord(ch) - ord("0") 
					else 
						k := ord(ch) - ord("A") + 10 
					end 
					if digits < 16 then
						x := x mod hexLimit
						if x >= hexLimit div 2 then
							x := x - hexLimit 
						end 
						x := x * 16 + k
						inc(i)
						ch := s[i] 
					else 
						res := 1 
					end 
					inc(digits) 
				end 
				if res = 0 then
					if (ch # "H") & (ch # "X") or (s[i + 1] # 0x) then
						res := 2 
					end  
				end  
			else 
				res := 2 
			end  
		else 
			if ch = "%" then
				inc(j)
				ch := s[j]
				base := 0
				if ("0" <= ch) & (ch <= "9") then
					k := ord(ch) - ord("0")
					repeat 
						base := base * 10 + k
						inc(j)
						ch := s[j]
						k := ord(ch) - ord("0") 
					until (ch < "0") or (ch > "9") or (base > (max(integer) - k) div 10) 
					if ("0" <= ch) & (ch <= "9") then
						base := 0 
					end  
				end  
			else 
				base := 10 
			end 
			
			if (base < 2) or (base > 16) then
				res := 2 
			elsif (base <= 10) & (ord(top) < base + ord("0")) 
				or (base > 10) & (ord(top) < base - 10 + ord("A")) then 
				x := 0
				ch := s[i]
				neg := false
				if ch = "-" then
					inc(i)
					ch := s[i]
					neg := true 
				elsif ch = "+" then 
					inc(i)
					ch := s[i] 
				end 
				while (ch # 0x) & (ch <= " ") do 
					inc(i)
					ch := s[i] 
				end 
				if ("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F") then
					if ch <= "9" then
						k := ord(ch) - ord("0") 
					else 
						k := ord(ch) - ord("A") + 10 
					end 
					while (("0" <= ch) & (ch <= "9") or ("A" <= ch) & (ch <= "F")) & (res = 0) do 
						if x >= (min(longint) + (base - 1) + k) div base then
							x := x * base - k
							inc(i)
							ch := s[i]
							if ch <= "9" then
								k := ord(ch) - ord("0") 
							else 
								k := ord(ch) - ord("A") + 10 
							end  
						else 
							res := 1 
						end  
					end  
				else 
					res := 2 
				end 
				if res = 0 then
					if ~neg then
						if x > min(longint) then
							x := -x 
						else 
							res := 1 
						end  
					end 
					if (ch # 0x) & (ch # "%") then
						res := 2 
					end  
				end  
			else 
				res := 2 
			end  
		end 
	end StringToLInt
	
	
	// real conversions
	
	proc RealToStringForm*(x: longreal; precision, minW, expW: integer; fillCh: wchar
		var s: array of wchar) 
		var 
			exp, len_, i, j, n, k, p: integer
			m: array 80 of wchar
			neg: boolean
	begin 
		assert((precision > 0), (* & (precision <= 18) *)20)
		assert((minW >= 0) & (minW < len(s)), 21)
		assert((expW > -len(s)) & (expW <= 3), 22)
		exp := Math.Exponent(x)
		if exp = max(integer) then
			if fillCh = "0" then
				fillCh := digitspace 
			end 
			x := Math.Mantissa(x)
			if x = -1 then
				m := "-inf"
				n := 4 
			elsif x = 1 then 
				m := "inf"
				n := 3 
			else 
				m := "nan"
				n := 3 
			end 
			i := 0
			j := 0
			while minW > n do 
				s[i] := fillCh
				inc(i)
				dec(minW) 
			end 
			while (j <= n) & (i < len(s)) do 
				s[i] := m[j]
				inc(i)
				inc(j) 
			end  
		else 
			neg := false
			len_ := 1
			m := "00"
			if x < 0 then
				x := -x
				neg := true
				dec(minW) 
			end 
			if x # 0 then
				exp := (exp - 8) * 30103 div 100000 // * log(2)
				if exp > 0 then
					n := short(entier(x / Math.IntPower(10, exp)))
					x := x / Math.IntPower(10, exp) - n 
				elsif exp > -maxExp then 
					n := short(entier(x * Math.IntPower(10, -exp)))
					x := x * Math.IntPower(10, -exp) - n 
				else 
					n := short(entier(x * Math.IntPower(10, -exp - 2 * maxDig) * factor * factor))
					x := x * Math.IntPower(10, -exp - 2 * maxDig) * factor * factor - n 
				end 
				// x0 = (n + x) * 10^exp, 200 < n < 5000
				p := precision - 4
				if n < 1000 then
					inc(p) 
				end 
				if (expW < 0) & (p > exp - expW) then
					p := exp - expW 
				end 
				if p >= 0 then
					x := x + 0.5 / Math.IntPower(10, p) // rounding correction
					if x >= 1 then
						inc(n)
						x := x - 1 
					end  
				elsif p = -1 then 
					inc(n, 5) 
				elsif p = -2 then 
					inc(n, 50) 
				elsif p = -3 then 
					inc(n, 500) 
				end 
				i := 0
				k := 1000
				inc(exp, 3)
				if n < 1000 then
					k := 100
					dec(exp) 
				end 
				while (i < precision) & ((k > 0) or (x # 0)) do 
					if k > 0 then
						p := n div k
						n := n mod k
						k := k div 10 
					else 
						x := x * 10
						p := short(entier(x))
						x := x - p 
					end 
					m[i] := wchr(p + ord("0"))
					inc(i)
					if p # 0 then
						len_ := i 
					end  
				end  
			end 
			// x0 = m[0].m[1]...m[len-1] * 10^exp
			i := 0
			if (expW < 0) or (expW = 0) & (exp >= -3) & (exp <= len_ + 1) then
				n := exp + 1
				k := len_ - n
				if n < 1 then
					n := 1 
				end 
				if expW < 0 then
					k := -expW 
				elsif k < 1 then 
					k := 1 
				end 
				j := minW - n - k - 1
				p := -exp
				if neg & (p >= max(0, n) + max(0, k)) then
					neg := false
					inc(j) 
				end  
			else 
				if abs(exp) >= 100 then
					expW := 3 
				elsif (expW < 2) & (abs(exp) >= 10) then 
					expW := 2 
				elsif expW < 1 then 
					expW := 1 
				end 
				if len_ < 2 then
					len_ := 2 
				end 
				j := minW - len_ - 3 - expW
				k := len_
				if j > 0 then
					k := k + j
					j := 0
					if k > precision then
						j := k - precision
						k := precision 
					end  
				end 
				n := 1
				dec(k)
				p := 0 
			end 
			if neg & (fillCh = "0") then
				s[i] := "-"
				inc(i)
				neg := false 
			end 
			while j > 0 do 
				s[i] := fillCh
				inc(i)
				dec(j) 
			end 
			if neg & (i < len(s)) then
				s[i] := "-"
				inc(i) 
			end 
			j := 0
			while (n > 0) & (i < len(s)) do 
				if (p <= 0) & (j < len_) then
					s[i] := m[j]
					inc(j) 
				else 
					s[i] := "0" 
				end 
				inc(i)
				dec(n)
				dec(p) 
			end 
			if i < len(s) then
				s[i] := "."
				inc(i) 
			end 
			while (k > 0) & (i < len(s)) do 
				if (p <= 0) & (j < len_) then
					s[i] := m[j]
					inc(j) 
				else 
					s[i] := "0" 
				end 
				inc(i)
				dec(k)
				dec(p) 
			end 
			if expW > 0 then
				if i < len(s) then
					s[i] := "E"
					inc(i) 
				end 
				if i < len(s) then
					if exp < 0 then
						s[i] := "-"
						exp := -exp 
					else 
						s[i] := "+" 
					end 
					inc(i) 
				end 
				if (expW = 3) & (i < len(s)) then
					s[i] := wchr(exp div 100 + ord("0"))
					inc(i) 
				end 
				if (expW >= 2) & (i < len(s)) then
					s[i] := wchr(exp div 10 mod 10 + ord("0"))
					inc(i) 
				end 
				if i < len(s) then
					s[i] := wchr(exp mod 10 + ord("0"))
					inc(i) 
				end  
			end  
		end 
		if i < len(s) then
			s[i] := 0x 
		else 
			halt(23) 
		end 
	end RealToStringForm
	
	proc RealToString*(x: longreal; var s: array of wchar) 
	begin 
		RealToStringForm(x, 16, 0, 0, digitspace, s)
	end RealToString
	
	
	proc StringToReal*(in s: array of wchar; var x: longreal; var res: integer) 
		var 
			first, last, point, e, n, i, exp: integer
			y: longreal
			ch: wchar
			neg, negExp, dig: boolean
	begin 
		res := 0
		i := 0
		ch := s[0]
		dig := false
		while (ch # 0x) & (ch <= " ") or (ch = 8bx) or (ch = 8fx) or (ch = 0a0x) do 
			inc(i)
			ch := s[i] 
		end 
		if ch = "+" then
			neg := false
			inc(i)
			ch := s[i] 
		elsif ch = "-" then 
			neg := true
			inc(i)
			ch := s[i] 
		else 
			neg := false 
		end 
		while ch = "0" do 
			inc(i)
			ch := s[i]
			dig := true 
		end 
		first := i
		e := 0
		while ("0" <= ch) & (ch <= "9") do 
			inc(i)
			ch := s[i]
			inc(e)
			dig := true 
		end 
		point := i
		if ch = "." then
			inc(i)
			ch := s[i]
			if e = 0 then
				while ch = "0" do 
					inc(i)
					ch := s[i]
					dec(e)
					dig := true 
				end 
				first := i 
			end 
			while ("0" <= ch) & (ch <= "9") do 
				inc(i)
				ch := s[i]
				dig := true 
			end  
		end 
		last := i - 1
		exp := 0
		if (ch = "E") or (ch = "D") then
			inc(i)
			ch := s[i]
			negExp := false
			if ch = "-" then
				negExp := true
				inc(i)
				ch := s[i] 
			elsif ch = "+" then 
				inc(i)
				ch := s[i] 
			end 
			while ("0" <= ch) & (ch <= "9") & (exp < 1000) do 
				exp := exp * 10 + (ord(ch) - ord("0"))
				inc(i)
				ch := s[i] 
			end 
			if negExp then
				exp := -exp 
			end  
		end 
		exp := exp + e
		x := 0
		y := 0
		n := 0
		while (n < maxDig) & (first <= last) do 
			if first # point then
				x := x * 10 + (ord(s[first]) - ord("0"))
				inc(n) 
			end 
			inc(first) 
		end 
		while last >= first do 
			if last # point then
				y := (y + (ord(s[last]) - ord("0"))) / 10 
			end 
			dec(last) 
		end 
		if ~dig or (ch # 0x) then // syntax error
			res := 2 
		elsif exp < -maxExp - maxDig then 
			x := 0.0 
		elsif exp < -maxExp + maxDig then 
			x := (x + y) / Math.IntPower(10, n - exp - 2 * maxDig) / factor / factor 
		elsif exp < n then 
			x := (x + y) / Math.IntPower(10, n - exp) 
		elsif exp < maxExp then 
			x := (x + y) * Math.IntPower(10, exp - n) 
		elsif exp = maxExp then 
			x := (x + y) * (Math.IntPower(10, exp - n) / 16)
			if x <= max(longreal) / 16 then
				x := x * 16 
			else  // overflow
				res := 1 
			end  
		else  // overflow
			res := 1 
		end 
		if neg then
			x := -x 
		end 
	end StringToReal
	
	
	// set conversions
	
	proc SetToString*(x: set; var str: array of wchar) 
		var 
			len_, i: integer
		
		proc AppendChar(ch: wchar; var len_: integer; var str: array of wchar) 
		begin 
			assert(len_ < len(str), 23)
			str[len_] := ch
			inc(len_)
		end AppendChar
		
		proc AppendInt(x: integer; len_: integer; var str: array of wchar) 
			var 
				i: integer
				ch: wchar
				buf: array 32 of wchar
		begin 
			IntToString(x, buf)
			ch := buf[0]
			i := 0
			while ch # 0x do 
				AppendChar(ch,len_,str)
				inc(i)
				ch := buf[i] 
			end 
		end AppendInt
	
	begin 
		len_ := 0
		AppendChar('{',len_,str)
		i := min(set)
		while x # {} do 
			if i in x then
				AppendInt(i,len_,str)
				excl(x, i)
				if (i <= max(set) - 2) & (i + 1 in x) & (i + 2 in x) then
					AppendChar('.',len_,str)
					AppendChar('.',len_,str)
					x := x - {i + 1, i + 2}
					inc(i, 3)
					while (i <= max(set)) & (i in x) do 
						excl(x, i)
						inc(i) 
					end 
					AppendInt(i - 1,len_,str) 
				end 
				if x # {} then
					AppendChar(",",len_,str)
					AppendChar(" ",len_,str) 
				end  
			end 
			inc(i) 
		end 
		AppendChar("}",len_,str)
		AppendChar(0x,len_,str)
	end SetToString
	
	proc StringToSet*(in s: array of wchar; var x: set; var res: integer) 
		var 
			next, x1: integer
			ch: wchar
		
		proc NextChar( var next: integer; var ch: wchar; in s: array of wchar )
		begin 
			ch := s[next]
			while (ch <= " ") & (ch # 0x) do 
				inc(next)
				ch := s[next] 
			end 
			if ch # 0x then
				inc(next) 
			end 
		end NextChar
		
		proc ParseInt(var next, res: integer; var ch: wchar; in s: array of wchar): integer 
			var 
				intval: integer
		begin 
			intval := ord(ch) - ord("0")
			ch := s[next]
			while ("0" <= ch) & (ch <= "9") do 
				intval := intval * 10 + ord(ch) - ord('0')
				if intval > max(set) then
					res := 1
					intval := 0 
				end 
				inc(next)
				ch := s[next] 
			end 
			NextChar(next,ch,s)
			return intval
		end ParseInt
		
		proc ParseRange(var next, res: integer; var x: set; x1: integer; var ch: wchar; in s: array of wchar) 
			var 
				x2, i: integer
		begin 
			ch := s[next]
			inc(next)
			if ch = "." then
				NextChar(next,ch,s)
				if ("0" <= ch) & (ch <= "9") then
					x2 := ParseInt(next,res,ch,s)
					if res = 0 then
						if x2 >= x1 then
							for i:= x1 to x2 do 
								incl(x, i) 
							end  
						else 
							res := 2 
						end  
					end  
				else 
					res := 2 
				end  
			else 
				res := 2 
			end 
		end ParseRange
	
	begin 
		x := {}
		res := 0
		next := 0
		NextChar(next,ch,s)
		if ch = "{" then
			NextChar(next,ch,s)
			while ("0" <= ch) & (ch <= "9") & (res # 2) do 
				x1 := ParseInt(next,res,ch,s)
				if ch = "." then
					ParseRange(next,res,x,x1,ch,s) 
				elsif res = 0 then 
					incl(x, x1) 
				end 
				if ch = "," then
					NextChar(next,ch,s)
				end  
			end 
			if ch = "}" then
				NextChar(next,ch,s)
				if ch # 0x then
					res := 2 
				end  
			else 
				res := 2 
			end  
		else 
			res := 2 
		end 
	end StringToSet
	
	// ----------------------------- general purpose character classes and conversions ---------------------------
	
	proc IsUpper*(ch: wchar): boolean 
	begin 
		if ord(ch) < 256 then
			return toLower[ord(ch)] # ch 
		else 
			return Kernel.IsUpper(ch) 
		end 
	end IsUpper
	
	proc Upper*(ch: wchar): wchar 
	begin 
		if ord(ch) < 256 then
			return toUpper[ord(ch)] 
		else 
			return Kernel.Upper(ch) 
		end 
	end Upper
	
	proc IsLower*(ch: wchar): boolean 
	begin 
		if ord(ch) < 256 then
			return toUpper[ord(ch)] # ch 
		else 
			return Kernel.IsLower(ch) 
		end 
	end IsLower
	
	proc Lower*(ch: wchar): wchar 
	begin 
		if ord(ch) < 256 then
			return toLower[ord(ch)] 
		else 
			return Kernel.Lower(ch) 
		end 
	end Lower
	
	proc IsAlpha*(ch: wchar): boolean 
	begin 
		case ch of 
			"a" .. "z", "A" .. "Z": 
				return true 
		else 
			if ch > 7fx then
				return Kernel.IsAlpha(ch) 
			else 
				return false 
			end  
		end 
	end IsAlpha
	
	proc IsNumeric*(ch: wchar): boolean 
	begin 
		return ("0" <= ch) & (ch <= "9")
	end IsNumeric
	
	proc IsAlphaNumeric*(ch: wchar): boolean 
	begin 
		return IsAlpha(ch) or IsNumeric(ch)
	end IsAlphaNumeric
	
	// ----------------------------- Component Pascal character classes ---------------------------
	
	proc IsIdentStart*(ch: wchar): boolean 
	begin 
		case ch of 
			"a" .. "z", "A" .. "Z", "_": 
				return true 
		else 
			if ch > 7fx then
				return Kernel.IsAlpha(ch) 
			else 
				return false 
			end  
		end 
	end IsIdentStart
	
	proc IsIdent*(ch: wchar): boolean 
	begin 
		// returns IsIdentStart(ch) OR IsNumeric(ch); optimized because heavily used in the compiler
		case ch of 
			"a" .. "z", "A" .. "Z", "_", "0" .. "9": 
				return true 
		else 
			if ch > 7fx then
				return Kernel.IsAlpha(ch) 
			else 
				return false 
			end  
		end 
	end IsIdent
	
	// ----------------------------- string manipulation routines ---------------------------
	
	proc Valid*(in s: array of wchar): boolean 
		var 
			i: integer
	begin 
		i := 0
		while (i < len(s)) & (s[i] # 0x) do 
			inc(i) 
		end 
		return i < len(s)
	end Valid
	
	proc ToUpper*(in in_: array of wchar; var out: array of wchar) 
		var 
			i, max_: integer
	begin 
		i := 0
		max_ := len(out) - 1
		while (in_[i] # 0x) & (i < max_) do 
			if ord(in_[i]) < 256 then
				out[i] := toUpper[ord(in_[i])] 
			else 
				out[i] := Kernel.Upper(in_[i]) 
			end 
			inc(i) 
		end 
		out[i] := 0x
	end ToUpper
	
	proc ToLower*(in in_: array of wchar; var out: array of wchar) 
		var 
			i, max_: integer
	begin 
		i := 0
		max_ := len(out) - 1
		while (in_[i] # 0x) & (i < max_) do 
			if ord(in_[i]) < 256 then
				out[i] := toLower[ord(in_[i])] 
			else 
				out[i] := Kernel.Lower(in_[i]) 
			end 
			inc(i) 
		end 
		out[i] := 0x
	end ToLower
	
	proc Utf8ToString*(in in_: array of char; var out: array of wchar; var res: integer) 
	begin 
		Kernel.Utf8ToString(in_, out, res)
	end Utf8ToString
	
	proc StringToUtf8*(in in_: array of wchar; var out: array of char; var res: integer) 
	begin 
		Kernel.StringToUtf8(in_, out, res)
	end StringToUtf8
	
	proc Replace*(var s: array of wchar; pos, len_: integer; in rep: array of wchar) 
		// replace stretch s[pos]..s[pos+len-1] with rep
		// insert semantics if len = 0; delete semantics if LEN(rep$) = 0
		var 
			i, j, k, max_, lenS: integer
			ch: wchar
	begin 
		assert(len_ >= 0, 20)
		assert(pos >= 0, 21)
		lenS := len(s)
		max_ := len(s) - 1
		if pos <= lenS then
			i := pos
			j := 0
			ch := rep[0]
			if pos + len_ > lenS then
				len_ := lenS - pos 
			end 
			while (ch # 0x) & (len_ > 0) do 
				s[i] := ch
				inc(i)
				inc(j)
				dec(len_)
				ch := rep[j] 
			end 
			if len_ > 0 then // delete the remaining part of the stretch [pos, pos+len')
				repeat 
					ch := s[i + len_]
					s[i] := ch
					inc(i) 
				until ch = 0x  
			elsif ch # 0x then  // insert the remaining part of rep
				len_ := len(rep) - j
				k := lenS + len_
				if k > max_ then
					k := max_ 
				end 
				s[k] := 0x
				dec(k)
				while k - len_ >= i do 
					s[k] := s[k - len_]
					dec(k) 
				end 
				while (rep[j] # 0x) & (i < max_) do 
					s[i] := rep[j]
					inc(i)
					inc(j) 
				end  
			end  
		end 
	end Replace
	
	proc Extract*(s: array of wchar; pos, len_: integer; var res: array of wchar) 
		var 
			i, j, max_: integer
	begin 
		assert(len_ >= 0, 20)
		assert(pos >= 0, 21)
		i := 0
		j := 0
		max_ := len(res) - 1
		while (i < pos) & (s[i] # 0x) do 
			inc(i) 
		end 
		while (j < len_) & (j < max_) & (s[i] # 0x) do 
			res[j] := s[i]
			inc(j)
			inc(i) 
		end 
		res[j] := 0x
	end Extract
	
	proc Find*(in s: array of wchar; in pat: array of wchar; start: integer; var pos: integer) 
		var 
			j: integer
	begin 
		assert(start >= 0, 20)
		if (start = 0) or (start <= len(s) - len(pat)) then
			// start = 0 is optimization: need not call Len
			pos := start
			while s[pos] # 0x do 
				j := 0
				while (s[pos + j] = pat[j]) & (pat[j] # 0x) do 
					inc(j) 
				end 
				if pat[j] = 0x then
					return  
				end 
				inc(pos) 
			end  
		end 
		pos := -1 // pattern not found
	end Find
	
	proc Init
		var 
			i: integer
	begin 
		for i:= 0 to 255 do 
			toUpper[i] := wchr(i)
			toLower[i] := wchr(i) 
		end 
		for i:= ord("A") to ord("Z") do 
			toLower[i] := wchr(i + 32)
			toUpper[i + 32] := wchr(i) 
		end 
		for i:= ord("À") to ord("Ö") do 
			toLower[i] := wchr(i + 32)
			toUpper[i + 32] := wchr(i) 
		end 
		for i:= ord("Ø") to ord("Þ") do 
			toLower[i] := wchr(i + 32)
			toUpper[i + 32] := wchr(i) 
		end 
		toUpper[ord("ÿ")] := "Ÿ"
		digits := "0123456789ABCDEF"
		maxExp := short(entier(Math.Log(max(longreal)))) + 1
		maxDig := short(entier(-Math.Log(Math.Eps())))
		factor := Math.IntPower(10, maxDig)
	end Init

begin
	Init
end Strings
