module Interpreter
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20070209, bh, general command signatures
	   - 20141027, center #19, full Unicode support for Component Pascal identifiers added
	   - 20150403, center #36, support for long identifiers in StdInterpreter
	   - 20170819, center #172, adding BOOLEAN parameters to StdInterpreter
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import System.Kernel, System.Meta, System.Strings, System.Views, System.Dialog
	
	type 
		IntValue = pointer to record (Meta.Value) 
				int_: integer 
			end 
		StrValue = pointer to record (Meta.Value) 
				str: Dialog.String 
			end 
		BoolValue = pointer to record (Meta.Value) 
				bool: boolean 
			end 
		CallHook = pointer to record (Dialog.CallHook) end 
		Ident = Kernel.Name
	
		const 
			modNotFound = 10
			procNotFound = 11
			identExpected = 12
			unknownIdent = 13
			depositExpected = 14
			noDepositExpected = 15
			syntaxError = 16
			lparenExpected = 17
			rparenExpected = 18
			containerExpected = 19
			quoteExpected = 20
			fileNotFound = 21
			noController = 22
			noDialog = 23
			cannotUnload = 24
			commaExpected = 25
			incompParList = 26
		const 
			ident = 0
			dot = 1
			semicolon = 2
			eot = 3
			lparen = 4
			rparen = 5
			quote = 6
			comma = 7
			int_ = 8
		var 
			i, type_, res: integer
			ch: wchar
			id: Ident
			x: integer
			par: array 100 of pointer to Meta.Value
			numPar: integer
			
	proc (hook: CallHook) Call(in proc_, errorMsg: array of wchar; var res_: integer) 

		
		proc Concat(in a, b: array of wchar; var c: array of wchar) 
			var 
				i, j: integer
				ch: wchar
		begin 
			if a = " " then
				Dialog.MapString("#System:CommandError", c) 
			else 
				c := a 
			end 
			i := 0
			while c[i] # 0x do 
				inc(i) 
			end 
			c[i] := " "
			inc(i)
			j := 0
			ch := b[0]
			while ch # 0x do 
				c[i] := ch
				inc(i)
				inc(j)
				ch := b[j] 
			end 
			c[i] := 0x
		end Concat
		
		proc Error(in errorMsg: array of wchar; n: integer;in msg, par0, par1: array of wchar) 
			var 
				e, f: array 256 of wchar
		begin 
			if res = 0 then
				res := n
				if errorMsg # "" then
					Dialog.MapString(errorMsg, e)
					Dialog.MapParamString(msg, par0, par1, "", f)
					Concat(e, f, f)
					Dialog.ShowMsg(f) 
				end  
			end 
		end Error
		
		proc Init(var s: array of wchar) 
			var 
				i: integer
		begin 
			i := 0
			while i < len(s) do 
				s[i] := 0x
				inc(i) 
			end 
		end Init
		
		proc ShowLoaderResult(in errorMsg, mod_: array of wchar) 
			var 
				res: integer
				importing, imported, object: array 256 of wchar
		begin 
			Kernel.GetLoaderResult(res, importing, imported, object)
			case res of 
				| Kernel.fileNotFound: 
					Error(errorMsg,Kernel.fileNotFound, "#System:CodeFileNotFound", imported, "") 
				| Kernel.syntaxError: 
					Error(errorMsg,Kernel.syntaxError, "#System:CorruptedCodeFileFor", imported, "") 
				| Kernel.objNotFound: 
					Error(errorMsg,Kernel.objNotFound, "#System:ObjNotFoundImpFrom", imported, importing) 
				| Kernel.illegalFPrint: 
					Error(errorMsg,Kernel.illegalFPrint, "#System:ObjInconsImpFrom", imported, importing) 
				| Kernel.cyclicImport: 
					Error(errorMsg,Kernel.cyclicImport, "#System:CyclicImpFrom", imported, importing) 
				| Kernel.noMem: 
					Error(errorMsg,Kernel.noMem, "#System:NotEnoughMemoryFor", imported, "") 
			else 
				Error(errorMsg,res, "#System:CannotLoadModule", mod_, "") 
			end 
		end ShowLoaderResult
		
		proc CallProc(in errorMsg, mod_, proc_: array of wchar) 
			var 
				i, t: Meta.Item
				ok: boolean
		begin 
			ok := false
			Meta.Lookup(mod_, i)
			if i.obj = Meta.modObj then
				i.Lookup(proc_, i)
				if i.obj = Meta.procObj then
					i.GetReturnType(t)
					if (t.typ = 0) & (i.NumParam() = numPar) then
						i.ParamCallVal(par, t, ok) 
					else 
						ok := false 
					end 
					if ~ok then
						Error(errorMsg,incompParList, "#System:IncompatibleParList", mod_, proc_) 
					end  
				else 
					Error(errorMsg,Kernel.commNotFound, "#System:CommandNotFoundIn", proc_, mod_) 
				end  
			else 
				ShowLoaderResult(errorMsg, mod_) 
			end 
		end CallProc
		
		proc GetCh( in proc_, errorMsg: array of wchar )
		begin 
			if i < len(proc_) then
				ch := proc_[i]
				inc(i) 
			else 
				ch := 0x 
			end 
		end GetCh
		
		proc Scan( in proc_, errorMsg: array of wchar )
			var 
				j: integer
				num: array 32 of wchar
				r: integer
		begin 
			if res = 0 then
				while (ch # 0x) & (ch <= " ") do 
					GetCh(proc_, errorMsg)
				end 
				if ch = 0x then
					type_ := eot 
				elsif ch = "." then 
					type_ := dot
					GetCh(proc_, errorMsg)
				elsif ch = ";" then 
					type_ := semicolon
					GetCh(proc_, errorMsg) 
				elsif ch = "(" then 
					type_ := lparen
					GetCh(proc_, errorMsg) 
				elsif ch = ")" then 
					type_ := rparen
					GetCh(proc_, errorMsg) 
				elsif ch = "'" then 
					type_ := quote
					GetCh(proc_, errorMsg) 
				elsif ch = "," then 
					type_ := comma
					GetCh(proc_, errorMsg) 
				elsif (ch >= "0") & (ch <= "9") or (ch = "-") then 
					type_ := int_
					j := 0
					repeat 
						num[j] := ch
						inc(j)
						GetCh(proc_, errorMsg) 
					until (ch < "0") or (ch > "9") & (ch < "A") or (ch > "H") 
					num[j] := 0x
					Strings.StringToInt(num, x, r) 
				elsif Strings.IsIdentStart(ch) then 
					type_ := ident
					id[0] := ch
					j := 1
					GetCh(proc_, errorMsg)
					while (ch # 0x) & (i < len(proc_)) & Strings.IsIdent(ch) do 
						id[j] := ch
						inc(j)
						GetCh(proc_, errorMsg) 
					end 
					id[j] := 0x 
				else 
					Error(errorMsg,syntaxError, "#System:SyntaxError", "", "") 
				end  
			end 
		end Scan
		
		proc String(in proc_,errorMsg: array of wchar; var s: array of wchar) 
			var 
				j: integer
		begin 
			if type_ = quote then
				j := 0
				while (ch # 0x) & (ch # "'") & (j < len(s) - 1) do 
					s[j] := ch
					inc(j)
					GetCh(proc_, errorMsg) 
				end 
				s[j] := 0x
				if ch = "'" then
					GetCh(proc_, errorMsg)
					Scan(proc_, errorMsg) 
				else 
					Error(errorMsg,quoteExpected, "#System:QuoteExpected", "", "") 
				end  
			else 
				Error(errorMsg,quoteExpected, "#System:QuoteExpected", "", "") 
			end 
		end String
		
		proc ParamList(in proc_,errorMsg: array of wchar) 
			var 
				iv: IntValue
				sv: StrValue
				bv: BoolValue
		begin 
			numPar := 0
			if type_ = lparen then
				Scan(proc_, errorMsg)
				while (numPar < len(par)) & (type_ # rparen) & (res = 0) do 
					if type_ = quote then
						new(sv)
						String(proc_,errorMsg, sv.str)
						par[numPar] := sv
						inc(numPar) 
					elsif type_ = int_ then 
						new(iv)
						iv.int_ := x
						Scan(proc_, errorMsg)
						par[numPar] := iv
						inc(numPar) 
					elsif (type_ = ident) & ((id = "TRUE") or (id = "FALSE")) then 
						new(bv)
						bv.bool := (id = "TRUE")
						Scan(proc_, errorMsg)
						par[numPar] := bv
						inc(numPar) 
					else 
						Error(errorMsg,syntaxError, "#System:SyntaxError", "", "") 
					end 
					if type_ = comma then
						Scan(proc_, errorMsg) 
					elsif type_ # rparen then 
						Error(errorMsg,rparenExpected, "#System:RParenExpected", "", "") 
					end  
				end 
				Scan(proc_, errorMsg) 
			end 
		end ParamList
		
		proc Command( in proc_,errorMsg: array of wchar )
			var 
				left, right: Ident
		begin 
			// protect from parasitic anchors on stack
			Init(left)
			Init(right)
			left := id
			Scan(proc_, errorMsg)
			if type_ = dot then // Oberon command
				Scan(proc_, errorMsg)
				if type_ = ident then
					right := id
					Scan(proc_, errorMsg)
					ParamList(proc_,errorMsg)
					if res = 0 then
						CallProc(errorMsg, left, right) 
					end  
				else 
					Error(errorMsg,identExpected, "#System:IdentExpected", "", "") 
				end  
			else 
				Error(errorMsg,unknownIdent, "#System:UnknownIdent", id, "") 
			end 
		end Command
	
	begin 
		// protect from parasitic anchors on stack
		i := 0
		res := res_
		type_ := 0
		Init(id)
		x := 0
		Views.ClearQueue
		res := 0
		i := 0
		GetCh(proc_, errorMsg)
		Scan(proc_, errorMsg)
		if type_ = ident then
			Command(proc_,errorMsg)
			while (type_ = semicolon) & (res = 0) do 
				Scan(proc_, errorMsg)
				Command(proc_,errorMsg)
			end 
			if type_ # eot then
				Error(errorMsg,syntaxError, "#System:SyntaxError", "", "") 
			end  
		else 
			Error(errorMsg,syntaxError, "#System:SyntaxError", "", "") 
		end 
		if (res = 0) & (Views.Available() > 0) then
			Error(errorMsg,noDepositExpected, "#System:NoDepositExpected", "", "") 
		end 
		Views.ClearQueue
		res_ := res
	end Call
	
	proc Init
		var 
			hook: CallHook
	begin 
		new(hook)
		Dialog.SetCallHook(hook)
	end Init

begin
	Init
end Interpreter
