module Dialog
	(* project	= "BlackBox"
	   organization	= "www.oberon.ch"
	   contributors	= "Oberon microsystems"
	   version	= "System/Rsrc/About"
	   copyright	= "System/Rsrc/About"
	   license	= "Docu/BB-License"
	   changes	= "##=>
	   
	   - 20070212, mf, minor cleanup
	   - 20150329, center #34, fixing the reuse of open documents
	   - 20161216, center #144, inconsistent docu and usage of Files.Locator error codes
	   ##<="
	   issues	= "##=>
	   
	   - ...
	   ##<=" *)
	
	
	
	
	import 
		System.Kernel, System.Meta, System.Strings, System.Files, System.Stores, 
		System.Models, System.Sequencers, System.Views, 
		System.Containers, System.Dialog, System.Properties, System.Documents, 
		System.Converters, System.Windows
	
	
	type 
		Item* = pointer to (* extensible *) record 
				next*: Item
				item-, string-, filter-: pointer to array of wchar
				shortcut-: array 8 of wchar
				privateFilter-, failed, trapped: boolean // filter call failed, caused a trap
				res: integer  // result code of failed filter
			end 
		
		FilterProcVal = record (Meta.Value) p: Dialog.GuardProc end 
		FilterProcPVal = record (Meta.Value) p: proc (n: integer; var p: Dialog.Par) end 
		
		ViewHook = pointer to record (Views.ViewHook) end 
	
	
	var  // IN parameter for item filters
		curItem-: Item
	
	
	proc GetSubLoc*(mod_: array of wchar; cat: Files.Name
		var loc: Files.Locator; var name: Files.Name) 
		var 
			sub: Files.Name
			file: Files.File
			type_: Files.Type
	begin 
		if (cat[0] = "S") & (cat[1] = "y") & (cat[2] = "m") then
			type_ := Kernel.symType 
		elsif (cat[0] = "C") & (cat[1] = "o") & (cat[2] = "d") & (cat[3] = "e") then 
			type_ := Kernel.objType 
		else 
			type_ := "" 
		end 
		Kernel.SplitName(mod_, sub, name)
		Kernel.MakeFileName(name, type_)
		loc := Files.dir.This(sub)
		file := nil
		if loc.res = 0 then
			loc := loc.This(cat)
			if sub = "" then
				if loc.res = 0 then
					file := Files.dir.Old(loc, name, Files.shared)
					if file = nil then
						loc := nil 
					end  
				end 
				if (loc = nil) or (loc.res # 0) then
					loc := Files.dir.This("System")
					if loc.res = 0 then
						loc := loc.This(cat) 
					end  
				end  
			end  
		end 
	end GetSubLoc
	
	
	proc Len(var str: array of wchar): integer 
		var 
			i: integer
	begin 
		i := 0
		while str[i] # 0x do 
			inc(i) 
		end 
		return i
	end Len
	
	proc AddItem*(i: Item; item, string, filter, shortcut: array of wchar) 
		var 
			j: integer
			ch: wchar
	begin 
		assert(i # nil, 20)
		new(i.item, Len(item) + 1)
		new(i.string, Len(string) + 1)
		new(i.filter, Len(filter) + 1)
		assert((i.item # nil) & (i.string # nil) & (i.filter # nil), 100)
		i.item^ := item
		i.string^ := string
		i.filter^ := filter
		i.shortcut := shortcut
		j := 0
		ch := filter[0]
		while (ch # ".") & (ch # 0x) do 
			inc(j)
			ch := filter[j] 
		end 
		i.privateFilter := (j > 0) & (ch = 0x)
		i.failed := false
		i.trapped := false
	end AddItem
	
	proc ClearGuards*(i: Item) 
	begin 
		i.failed := false
		i.trapped := false
	end ClearGuards
	
	proc GetGuardProc(name: array of wchar; var i: Meta.Item
		var par: boolean; var n: integer) 
		var 
			j, k: integer
			num: array 32 of wchar
	begin 
		j := 0
		while (name[j] # 0x) & (name[j] # "(") do 
			inc(j) 
		end 
		if name[j] = "(" then
			name[j] := 0x
			inc(j)
			k := 0
			while (name[j] # 0x) & (name[j] # ")") do 
				num[k] := name[j]
				inc(j)
				inc(k) 
			end 
			if (name[j] = ")") & (name[j + 1] = 0x) then
				num[k] := 0x
				Strings.StringToInt(num, n, k)
				if k = 0 then
					Meta.LookupPath(name, i)
					par := true 
				else 
					Meta.Lookup("", i) 
				end  
			else 
				Meta.Lookup("", i) 
			end  
		else 
			Meta.LookupPath(name, i)
			par := false 
		end 
	end GetGuardProc
	
	proc CheckFilter*(i: Item; var failed, ok: boolean; var par: Dialog.Par) 
		var 
			x: Meta.Item
			v: FilterProcVal
			vp: FilterProcPVal
			p: boolean
			n: integer
	begin 
		if ~i.failed then
			curItem := i
			par.disabled := false
			par.checked := false
			par.label := i.item^
			par.undef := false
			par.readOnly := false
			i.failed := true
			i.trapped := true
			GetGuardProc(i.filter^, x, p, n)
			if (x.obj = Meta.procObj) or (x.obj = Meta.varObj) & (x.typ = Meta.procTyp) then
				if p then
					x.GetVal(vp, ok)
					if ok then
						vp.p(n, par) 
					end  
				else 
					x.GetVal(v, ok)
					if ok then
						v.p(par) 
					end  
				end  
			else 
				ok := false 
			end 
			if ok then
				i.res := 0 
			else 
				i.res := 1 
			end 
			i.trapped := false
			i.failed := ~ok 
		end 
		failed := i.failed
	end CheckFilter
	
	proc HandleItem*(i: Item) 
		var 
			res: integer
	begin 
		if ~i.failed then
			Views.ClearQueue
			res := 0
			Dialog.Call(i.string^, " ", res) 
		elsif (i # nil) & i.failed then 
			if i.trapped then
				Dialog.ShowParamMsg("#System:ItemFilterTrapped", i.string^, i.filter^, "") 
			else 
				Dialog.ShowParamMsg("#System:ItemFilterNotFound", i.string^, i.filter^, "") 
			end  
		end 
	end HandleItem
	
	proc RecalcView*(v: Views.View) 
		// recalc size of all subviews of v, then v itself
		var 
			m: Models.Model
			v1: Views.View
			c: Containers.Controller
			minW, maxW, minH, maxH, w, h, w0, h0: integer
	begin 
		if v is Containers.View then
			c := v(Containers.View).ThisController()
			if c # nil then
				v1 := nil
				c.GetFirstView(Containers.any, v1)
				while v1 # nil do 
					RecalcView(v1)
					c.GetNextView(Containers.any, v1) 
				end  
			end  
		end 
		if v.context # nil then
			m := v.context.ThisModel()
			if (m # nil) & (m is Containers.Model) then
				m(Containers.Model).GetEmbeddingLimits(minW, maxW, minH, maxH)
				v.context.GetSize(w0, h0)
				w := w0
				h := h0
				Properties.PreferredSize(v, minW, maxW, minH, maxH, w, h, w, h)
				if (w # w0) or (h # h0) then
					v.context.SetSize(w, h) 
				end  
			end  
		end 
	end RecalcView
	
	
	proc Open*(v: Views.View; title: array of wchar
		loc: Files.Locator; name: Files.Name; conv: Converters.Converter
		asTool, asAux, noResize, allowDuplicates, neverDirty: boolean) 
		var 
			t: Views.Title
			flags, opts: set
			done: boolean
			d: Documents.Document
			i: integer
			win: Windows.Window
			c: Containers.Controller
			seq: ^anyrec
	begin 
		if conv = nil then // use document converter
			conv := Converters.list 
		end 
		assert(v # nil, 20)
		flags := {}
		done := false
		if noResize then
			flags := flags + {Windows.noResize, Windows.noHScroll, Windows.noVScroll} 
		end 
		if asTool then
			incl(flags, Windows.isTool) 
		end 
		if asAux then
			incl(flags, Windows.isAux) 
		end 
		if neverDirty then
			incl(flags, Windows.neverDirty) 
		end 
		i := 0
		while (i < len(t) - 1) & (title[i] # 0x) do 
			t[i] := title[i]
			inc(i) 
		end 
		t[i] := 0x
		if ~allowDuplicates then
			Windows.SelectBySpec(loc, name, conv, flags, done)
			if ~done & (title # "") & (loc = nil) & (name = "") then
				Windows.SelectByTitle(v, flags, t, done) 
			end  
		else 
			incl(flags, Windows.allowDuplicates) 
		end 
		if ~done then
			if v is Documents.Document then
				if v.context # nil then
					d := Documents.dir.New(
						Views.CopyOf(v(Documents.Document).ThisView(), Views.shallow), 
						Views.undefined, Views.undefined) 
				else 
					d := v(Documents.Document) 
				end 
				assert(d.context = nil, 22)
				v := d.ThisView()
				assert(v # nil, 23) 
			elsif v.context # nil then 
				assert(v.context is Documents.Context, 24)
				d := v.context(Documents.Context).ThisDoc()
				if d.context # nil then
					d := Documents.dir.New(Views.CopyOf(v, Views.shallow), Views.undefined, Views.undefined) 
				end 
				assert(d.context = nil, 25) 
			// IF d.Domain() = NIL THEN Stores.InitDomain(d, v.Domain()) END (for views opened via Views.Old
			else 
				d := Documents.dir.New(v, Views.undefined, Views.undefined) 
			end 
			if asTool or asAux then
				c := d.ThisController()
				c.SetOpts(c.opts + {Containers.noSelection}) 
			end 
			assert(d.Domain() = v.Domain(), 100)
			assert(d.Domain() # nil, 101)
			seq := d.Domain().GetSequencer()
			if neverDirty & (seq # nil) then
				assert(seq is Sequencers.Sequencer, 26)
				seq(Sequencers.Sequencer).SetDirty(false) 
			end 
			if neverDirty then
				// change "fit to page" to "fit to window" in secondary windows
				c := d.ThisController()
				opts := c.opts
				if Documents.pageWidth in opts then
					opts := opts - {Documents.pageWidth} + {Documents.winWidth} 
				end 
				if Documents.pageHeight in opts then
					opts := opts - {Documents.pageHeight} + {Documents.winHeight} 
				end 
				c.SetOpts(opts) 
			end 
			win := Windows.dir.New()
			if seq # nil then
				Windows.dir.OpenSubWindow(win, d, flags, t) 
			else 
				Windows.dir.Open(win, d, flags, t, loc, name, conv) 
			end  
		end 
	end Open
	
	proc (h: ViewHook) Open(v: Views.View; title: array of wchar
		loc: Files.Locator; name: Files.Name; conv: Converters.Converter
		asTool, asAux, noResize, allowDuplicates, neverDirty: boolean) 
	begin 
		Open(v, title, loc, name, conv, asTool, asAux, noResize, allowDuplicates, neverDirty)
	end Open
	
	proc (h: ViewHook) OldView(loc: Files.Locator; name: Files.Name
		var conv: Converters.Converter): Views.View 
		var 
			w: Windows.Window
			s: Stores.Store
			c: Converters.Converter
	begin 
		assert(loc # nil, 20)
		assert(name # "", 21)
		Kernel.MakeFileName(name, "")
		s := nil
		c := conv
		if c = nil then // use document converter
			c := Converters.list 
		end 
		w := Windows.GetBySpec(loc, name, c, {})
		if w # nil then
			s := w.doc.ThisView() 
		end 
		if s = nil then
			Converters.Import(loc, name, conv, s)
			if s # nil then
				RecalcView(s(Views.View)) 
			end  
		end 
		if s # nil then
			return s(Views.View) 
		else 
			return nil 
		end 
	end OldView
	
	proc (h: ViewHook) RegisterView(v: Views.View
		loc: Files.Locator; name: Files.Name; conv: Converters.Converter) 
	begin 
		assert(v # nil, 20)
		assert(loc # nil, 21)
		assert(name # "", 22)
		Kernel.MakeFileName(name, "")
		Converters.Export(loc, name, conv, v)
	end RegisterView
	
	proc Init
		var 
			h: ViewHook
	begin 
		new(h)
		Views.SetViewHook(h)
	end Init

begin
	Init
end Dialog
